use std::path::{PathBuf, Path};

use serde::Deserialize;
use std::fs;
use std::io::Error;

/// Represents basic client configuration
/// todo: specify pcap backup
#[derive(Deserialize)]
pub struct ClientConfig {

    /// the path to the directory which holds the client test scirpts.
    script_dir: PathBuf,

    /// the directory in which to store the pcap generated by the scripts in [script_dir]
    pcap_dir: PathBuf,

    /// the list of interfaces to listen on for the packet captures
    interfaces: Vec<String>,

    /// the ip or hostname of the end server to send the resulting pcap
    srv_addr: String,

    /// the port to send the pcap to
    srv_port: usize,
}

impl ClientConfig {
    pub fn from_path<P: AsRef<Path>>(path: P) -> Result<ClientConfig, Error> {
        // todo: handle toml parsing error
        match fs::read_to_string(path) {
            Ok(content) =>
                Ok(toml::from_str(&*content).unwrap()),
            Err(err) =>
                Err(err)
        }
    }

    pub fn run_scripts(&self) -> Result<(), usize> {
        todo!("run all scripts in self.script_dir")
    }

    pub fn transfer_pcaps(&self) {
        todo!("transfer all pcap files in self.pcap_dir to the remote (or local) analysis server")
    }
}