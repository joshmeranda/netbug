use std::path::{PathBuf, Path};
use std::net::SocketAddr;
use std::{result, fs};

use crate::config::{defaults, error};

pub type Result = result::Result<ServerConfig, error::Error>;

#[derive(Deserialize)]
pub struct ServerConfig {
    /// the directory in which to store the pcap generated by the scripts in [script_dir]
    #[serde(default = "defaults::default_pcap_dir")]
    pub pcap_dir: PathBuf,

    /// the host / ip and port pair of the target socket
    pub srv_addr: SocketAddr,
}

impl ServerConfig {
    pub fn new() -> Result {
        let default_path = defaults::default_config_file_path();

        ServerConfig::from_path(default_path)
    }

    pub fn from_path<P: AsRef<Path>>(path: P) -> Result {
        let content = fs::read_to_string(path)?;

        match toml::from_str(content.as_str()) {
            Ok(cfg) => Ok(cfg),
            Err(err) => Err(error::Error::from(err)),
        }
    }
}